---
interface Props {
  username: string;
}

const { username } = Astro.props;

const range = (n: number) => Array.from(Array(n).keys());
---

<div class="github" data-username={username}>
  <p class="github-text">Loading github...</p>
  <div class="calendar" data-username={username}>
    <svg viewBox="0 0 52 7">
      {
        range(52).map((x) =>
          range(7).map((y) => (
            <circle
              class="day"
              data-level="0"
              cx={x + 0.5}
              cy={y + 0.5}
              r=".4"
            />
          ))
        )
      }
    </svg>
  </div>
</div>
<style>
  .calendar {
    display: block;
    width: 100%;
    height: 100%;
  }
  .calendar :global(svg) {
    width: 100%;
    height: 100%;
    resize: both;
    overflow: auto;
  }
  .calendar :global(.day[data-level="0"]) {
    fill: rgba(255, 255, 255, 0.1);
  }
  .calendar :global(.day[data-level="1"]) {
    fill: #39dd34;
  }
  .calendar :global(.day[data-level="2"]) {
    fill: #45a045;
  }
  .calendar :global(.day[data-level="3"]) {
    fill: #047526;
  }
  .calendar :global(.day[data-level="4"]) {
    fill: #0a4208;
  }
</style>
<script>
  function getInfo(username: string, cache: boolean) {
    const cacheKeys = {
      content: `gh_info_content.${username}`,
      expire_at: `gh_info_expire.${username}`,
    };
    if (cache) {
      const currentCacheExpire = localStorage.getItem(cacheKeys.expire_at);
      if (currentCacheExpire && Date.now() < +currentCacheExpire) {
        const content = localStorage.getItem(cacheKeys.content);
        if (content) {
          return Promise.resolve(content);
        }
      }
    }

    return fetch(`https://api.bloggify.net/gh-calendar/?username=${username}`)
      .then((r) => r.text())
      .then((body) => {
        if (cache) {
          localStorage.setItem(cacheKeys.content, body);
          localStorage.setItem(
            cacheKeys.expire_at,
            Date.now() + 1000 * 60 * 60 * 24 + ""
          );
        }
        return body;
      });
  }
  function extractNumbers(inputString: string): string[] {
    const regex = /\b\d+\b/g;
    return inputString.match(regex) || [];
  }

  document.addEventListener("DOMContentLoaded", function () {
    const calendarEl = document.querySelector(".calendar") as HTMLElement;
    if (!calendarEl || !calendarEl.dataset.username) {
      return;
    }
    const username = calendarEl.dataset.username;
    getInfo(username, true).then((content) => {
      const div = document.createElement("div");
      div.innerHTML = content;
      const header = div.querySelector("h2");
      if (!header) {
        return;
      }
      const activity = div.querySelector(
        "#user-activity-overview div div div div div"
      );
      const githubText = document.querySelector(".github-text");
      if (!githubText) {
        return;
      }
      if (activity) {
        const contributions = extractNumbers(header.innerText)[0];
        const repos = activity.querySelectorAll("a");
        const links: { text: string; href: string }[] = [];
        repos.forEach((element) =>
          links.push({
            text: element.innerText.split("/").pop() || "",
            href: `https://github.com/${element.innerText}`,
          })
        );
        const otherReposRegex = /(\b\d+\b)\s+other\s+repositories/;
        const otherReposMatch = (activity as HTMLElement).innerText.match(
          otherReposRegex
        );
        const numOfotherRepos = otherReposMatch ? otherReposMatch[1] : 0;
        const repoText = links
          .map(
            ({ text, href }) => `<a href="${href}" target="_blank">${text}</a>`
          )
          .join(", ");

        githubText.innerHTML = `I have made ${contributions} contributions over the last year. Most recently to ${repoText} and ${numOfotherRepos} other repositories`;
      } else {
        githubText.innerHTML = `Github activity`;
      }
      const days = div.querySelectorAll(
        ".ContributionCalendar table.ContributionCalendar-grid .ContributionCalendar-day"
      );
      if (!days) {
        return;
      }
      const cal: { level: number; date: Date }[] = [];
      days.forEach((dayElement) => {
        //get data-level
        const dayElementDiv = dayElement as HTMLElement;
        const level = dayElementDiv.dataset.level;
        if (!level) {
          return;
        }

        const date = dayElementDiv.dataset.date;
        if (!date) {
          return;
        }
        cal.push({
          level: +level,
          date: new Date(date),
        });
      });
      //Convert to html
      const calHtml = cal
        .slice(0, 52 * 7)
        .map((day, i) => {
          const y = i % 7;
          const x = i % 52;
          return `<circle class="day" data-level="${
            day.level
          }" data-date="${day.date.toISOString()}" cx="${x + 0.5}" cy="${
            y + 0.5
          }" r=".4"></circle>`;
        })
        .join("\n");

      calendarEl.innerHTML = '<svg viewBox="0 0 52 7">' + calHtml + "</svg>";
    });
  });
</script>
